<?php

use App\Models\Book;
use App\Services\BookService;
use App\Services\OpenAIService;
use Illuminate\Support\Facades\Http;

beforeEach(function () {
    $this->bookService = new BookService(new OpenAIService());
});

it('can store a book with a description generated by AI', function () {
    Http::fake([
        'https://api.openai.com/v1/chat/completions' => Http::response([
            'choices' => [
                [
                    'message' => [
                        'content' => 'This is a generated book description.'
                    ]
                ]
            ]
        ], 200)
    ]);

    $bookData = [
        'title' => 'Test Book',
        'author' => 'John Doe',
        'description' => '', // Leave empty for AI to generate
        'tags' => 'fiction, adventure',
    ];

    $book = $this->bookService->store($bookData);

    $this->assertDatabaseHas('books', [
        'title' => 'Test Book',
        'author' => 'John Doe',
        'description' => 'This is a generated book description.',
    ]);
});

it('can store a book with AI-generated tags', function () {
    Http::fake([
        'https://api.openai.com/v1/chat/completions' => Http::response([
            'choices' => [
                [
                    'message' => [
                        'content' => 'fantasy, adventure'
                    ]
                ]
            ]
        ], 200)
    ]);

    $bookData = [
        'title' => 'AI Book',
        'author' => 'AI Author',
        'description' => 'A book about artificial intelligence.',
        'tags' => '', // Leave empty for AI to generate tags
    ];

    $book = $this->bookService->store($bookData);

    $this->assertDatabaseHas('books', [
        'title' => 'AI Book',
        'tags' => json_encode(['fantasy', 'adventure']),
    ]);
});
